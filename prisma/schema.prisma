// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PlanStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  USER
  ADMIN
}

enum ActivityType {
  PLAN_APPROVED
  PLAN_REJECTED
  PLAN_DELETED
  USER_ROLE_CHANGED
  USER_DELETED
  COMMENT_DELETED
  SETTINGS_UPDATED
  CATEGORY_CREATED
  CATEGORY_UPDATED
  CATEGORY_DELETED
  TAG_CREATED
  TAG_DELETED
  EMAIL_SENT
  BACKUP_CREATED
  CACHE_CLEARED
}

enum EmailStatus {
  DRAFT
  QUEUED
  SENDING
  SENT
  FAILED
}

enum BadgeType {
  FIRST_PLAN
  LIKES_10
  LIKES_50
  LIKES_100
  VIEWS_100
  VIEWS_500
  VIEWS_1000
  COMMENTS_10
  COMMENTS_50
  ACTIVE_7_DAYS
  ACTIVE_30_DAYS
  ACTIVE_100_DAYS
  PLANS_5
  PLANS_10
  PLANS_25
  EARLY_ADOPTER
  COMMUNITY_HELPER
  WEIGHT_LOSS_HERO
}

enum GoalType {
  DAILY_LOGIN
  WEEKLY_PLAN
  WEEKLY_COMMENT
  WEEKLY_LIKE
  MONTHLY_ACTIVE
}

model User {
  id              String          @id @default(cuid())
  email           String          @unique
  passwordHash    String?
  name            String?
  image           String? // avatar
  bio             String?         @db.Text
  startWeight     Int?
  goalWeight      Int?
  instagram       String?
  twitter         String?
  youtube         String?
  tiktok          String?
  website         String?
  role            Role            @default(USER)
  xp              Int             @default(0)
  level           Int             @default(1)
  streak          Int             @default(0)
  lastActiveDate  DateTime?
  accounts        Account[]
  sessions        Session[]
  plans           Plan[]
  comments        Comment[]
  likes           Like[]
  favorites       Favorite[]
  collections     Collection[]
  activityLogs    ActivityLog[]
  emailCampaigns  EmailCampaign[]
  bannedWords     BannedWord[]
  siteSettings    SiteSettings[]
  backups         Backup[]
  badges          UserBadge[]
  goals           UserGoal[]
  weightLogs      WeightLog[]
  checkIns        CheckIn[]
  progressPhotos  ProgressPhoto[]
  measurements    Measurement[]
  moodLogs        MoodLog[]
  following       Follow[]        @relation("UserFollowing")
  followers       Follow[]        @relation("UserFollowers")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([xp, level])
}

model Plan {
  id              String            @id @default(cuid())
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  title           String
  slug            String            @unique
  startWeight     Int
  goalWeight      Int
  durationText    String
  routine         String            @db.Text
  diet            String            @db.Text
  exercise        String            @db.Text
  motivation      String
  imageUrl        String?
  videoUrl        String?           // YouTube/Vimeo URL
  status          PlanStatus        @default(PENDING)
  rejectionReason String?           @db.Text
  views           Int               @default(0)
  categoryId      String?
  category        Category?         @relation(fields: [categoryId], references: [id])
  tags            PlanTag[]
  likes           Like[]
  favorites       Favorite[]
  comments        Comment[]
  collectionPlans CollectionPlan[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([status, createdAt])
  @@index([slug])
  @@index([goalWeight, startWeight])
  @@index([categoryId])
}

model Comment {
  id        String   @id @default(cuid())
  planId    String
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  body      String   @db.Text
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(cuid())
  planId    String
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([planId, userId])
}

model Favorite {
  id        String   @id @default(cuid())
  planId    String
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  note      String?  @db.Text
  createdAt DateTime @default(now())

  @@unique([planId, userId])
  @@index([userId, createdAt])
}

// NextAuth default models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

// Site ayarları
model SiteSettings {
  id              String   @id @default(cuid())
  siteTitle       String   @default("Zayıflama Planım")
  siteDescription String   @db.Text
  logoUrl         String?
  twitterUrl      String?
  instagramUrl    String?
  facebookUrl     String?
  footerText      String?  @db.Text
  maintenanceMode Boolean  @default(false)
  updatedAt       DateTime @updatedAt
  updatedBy       String
  updatedByUser   User     @relation(fields: [updatedBy], references: [id])
}

// Kategoriler
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?  @db.Text
  color       String   @default("#4caf50")
  order       Int      @default(0)
  plans       Plan[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Etiketler
model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  plans     PlanTag[]
  createdAt DateTime  @default(now())
}

// Plan-Tag ilişkisi (many-to-many)
model PlanTag {
  id     String @id @default(cuid())
  planId String
  tagId  String
  plan   Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([planId, tagId])
}

// Yasaklı kelimeler
model BannedWord {
  id        String   @id @default(cuid())
  word      String   @unique
  createdAt DateTime @default(now())
  createdBy String
  creator   User     @relation(fields: [createdBy], references: [id])
}

// Aktivite logu
model ActivityLog {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  type        ActivityType
  targetId    String?
  targetType  String?
  description String       @db.Text
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime     @default(now())

  @@index([userId, createdAt])
  @@index([type, createdAt])
}

// Email kampanyaları
model EmailCampaign {
  id          String      @id @default(cuid())
  subject     String
  content     String      @db.Text
  recipients  String
  status      EmailStatus @default(DRAFT)
  sentCount   Int         @default(0)
  failedCount Int         @default(0)
  createdBy   String
  creator     User        @relation(fields: [createdBy], references: [id])
  createdAt   DateTime    @default(now())
  sentAt      DateTime?

  @@index([status, createdAt])
}

// Veritabanı yedekleri
model Backup {
  id        String   @id @default(cuid())
  filename  String
  size      Int
  type      String   @default("manual")
  createdBy String?
  creator   User?    @relation(fields: [createdBy], references: [id])
  createdAt DateTime @default(now())
}

// Gamification - Rozetler
model Badge {
  id          String      @id @default(cuid())
  type        BadgeType   @unique
  name        String
  description String      @db.Text
  icon        String
  xpReward    Int         @default(0)
  users       UserBadge[]
  createdAt   DateTime    @default(now())
}

// Kullanıcı rozetleri
model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badgeId   String
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  earnedAt  DateTime @default(now())

  @@unique([userId, badgeId])
  @@index([userId, earnedAt])
}

// Hedefler
model Goal {
  id          String     @id @default(cuid())
  type        GoalType   @unique
  name        String
  description String     @db.Text
  target      Int
  xpReward    Int        @default(0)
  users       UserGoal[]
  createdAt   DateTime   @default(now())
}

// Kullanıcı hedefleri
model UserGoal {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalId      String
  goal        Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
  progress    Int      @default(0)
  completed   Boolean  @default(false)
  completedAt DateTime?
  startDate   DateTime @default(now())
  endDate     DateTime

  @@unique([userId, goalId, startDate])
  @@index([userId, completed])
}

// Analitik & Takip Modelleri

// Kilo takibi
model WeightLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  weight    Float    // kg cinsinden
  note      String?  @db.Text
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

// Check-in sistemi
model CheckIn {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  weight      Float?   // kg
  energy      Int?     // 1-5 arası enerji seviyesi
  motivation  Int?     // 1-5 arası motivasyon
  sleep       Int?     // saat cinsinden uyku
  water       Int?     // bardak cinsinden su tüketimi
  exercise    Boolean  @default(false)
  dietPlan    Boolean  @default(false)
  note        String?  @db.Text
  createdAt   DateTime @default(now())

  @@index([userId, createdAt])
}

// İlerleme fotoğrafları
model ProgressPhoto {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageUrl    String
  weight      Float?   // fotoğraf çekildiğinde kilo
  description String?  @db.Text
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId, createdAt])
}

// Vücut ölçümleri
model Measurement {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chest     Float?   // göğüs (cm)
  waist     Float?   // bel (cm)
  hips      Float?   // kalça (cm)
  thigh     Float?   // uyluk (cm)
  arm       Float?   // kol (cm)
  neck      Float?   // boyun (cm)
  note      String?  @db.Text
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

// Ruh hali takibi
model MoodLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mood      Int      // 1-5 arası (1: çok kötü, 5: harika)
  stress    Int?     // 1-5 arası stres seviyesi
  note      String?  @db.Text
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

// Plan Koleksiyonları
model Collection {
  id          String           @id @default(cuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?          @db.Text
  isPublic    Boolean          @default(false)
  plans       CollectionPlan[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([userId, createdAt])
}

// Koleksiyon-Plan ilişkisi
model CollectionPlan {
  id           String     @id @default(cuid())
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  planId       String
  plan         Plan       @relation(fields: [planId], references: [id], onDelete: Cascade)
  order        Int        @default(0)
  note         String?    @db.Text
  createdAt    DateTime   @default(now())

  @@unique([collectionId, planId])
  @@index([collectionId, order])
}

// Kullanıcı takip sistemi
model Follow {
  id          String   @id @default(cuid())
  followerId  String   // Takip eden kullanıcı
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String   // Takip edilen kullanıcı
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}
