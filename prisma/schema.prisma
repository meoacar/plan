generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                      @id @default(cuid())
  email                    String                      @unique
  passwordHash             String?
  name                     String?
  image                    String?
  bio                      String?
  startWeight              Int?
  goalWeight               Int?
  role                     Role                        @default(USER)
  createdAt                DateTime                    @default(now())
  updatedAt                DateTime                    @updatedAt
  instagram                String?
  tiktok                   String?
  twitter                  String?
  website                  String?
  youtube                  String?
  lastActiveDate           DateTime?
  level                    Int                         @default(1)
  streak                   Int                         @default(0)
  xp                       Int                         @default(0)
  city                     String?
  username                 String?                     @unique
  resetToken               String?
  resetTokenExpiry         DateTime?
  allowMessages            Boolean                     @default(true)
  isPrivate                Boolean                     @default(false)
  requireFollowApproval    Boolean                     @default(false)
  showEmail                Boolean                     @default(false)
  showWeight               Boolean                     @default(true)
  accounts                 Account[]
  partnerReceived          AccountabilityPartnership[] @relation("PartnerReceiver")
  partnerRequests          AccountabilityPartnership[] @relation("PartnerRequester")
  activityLogs             ActivityLog[]
  backups                  Backup[]
  bannedWords              BannedWord[]
  calorieGoal              CalorieGoal?
  createdChallenges        Challenge[]
  challengeParticipations  ChallengeParticipant[]
  cheatChallenges          CheatChallenge[]
  cheatMeals               CheatMeal[]
  checkIns                 CheckIn[]
  collections              Collection[]
  comments                 Comment[]
  commentReactions         CommentReaction[]
  crisisButtons            CrisisButton[]
  emailCampaigns           EmailCampaign[]
  favorites                Favorite[]
  following                Follow[]                    @relation("UserFollowing")
  followers                Follow[]                    @relation("UserFollowers")
  groupEvents              GroupEvent[]                @relation("GroupEvents")
  groupEventParticipations GroupEventParticipant[]     @relation("GroupEventParticipants")
  groupGoalProgress        GroupGoalProgress[]         @relation("GroupGoalProgress")
  groupLeaderboard         GroupLeaderboard[]          @relation("GroupLeaderboard")
  groupMemberships         GroupMember[]               @relation("GroupMembers")
  groupMessages            GroupMessage[]              @relation("GroupMessages")
  groupPosts               GroupPost[]                 @relation("GroupPosts")
  groupPostComments        GroupPostComment[]          @relation("GroupPostComments")
  groupPostLikes           GroupPostLike[]             @relation("GroupPostLikes")
  groupResources           GroupResource[]             @relation("GroupResources")
  groupWeeklyGoals         GroupWeeklyGoal[]           @relation("GroupWeeklyGoals")
  likes                    Like[]
  meals                    Meal[]
  measurements             Measurement[]
  moodLogs                 MoodLog[]
  notifications            Notification[]
  notificationPreference   NotificationPreference?
  plans                    Plan[]
  polls                    Poll[]
  pollVotes                PollVote[]
  profileCustomization     ProfileCustomization?
  progressPhotos           ProgressPhoto[]
  pushSubscriptions        PushSubscription[]
  recipeComments           RecipeComment[]
  sessions                 Session[]
  siteSettings             SiteSettings[]
  badges                   UserBadge[]
  goals                    UserGoal[]
  wallPostsWritten         WallPost[]                  @relation("WallPostAuthor")
  wallPosts                WallPost[]                  @relation("WallPostOwner")
  weightLogs               WeightLog[]

  @@index([xp, level])
}

model Plan {
  id              String           @id @default(cuid())
  userId          String
  title           String
  slug            String           @unique
  startWeight     Int
  goalWeight      Int
  durationText    String
  routine         String
  diet            String
  exercise        String
  motivation      String
  imageUrl        String?
  status          PlanStatus       @default(PENDING)
  views           Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  categoryId      String?
  rejectionReason String?
  videoUrl        String?
  collectionPlans CollectionPlan[]
  comments        Comment[]
  favorites       Favorite[]
  likes           Like[]
  category        Category?        @relation(fields: [categoryId], references: [id])
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags            PlanTag[]

  @@index([status, createdAt])
  @@index([status, views])
  @@index([slug])
  @@index([goalWeight, startWeight])
  @@index([categoryId])
}

model Comment {
  id        String            @id @default(cuid())
  planId    String
  userId    String
  body      String
  createdAt DateTime          @default(now())
  plan      Plan              @relation(fields: [planId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions CommentReaction[]
  
  @@index([planId, createdAt])
  @@index([userId])
}

model CommentReaction {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId, emoji])
  @@index([commentId])
  @@index([userId])
}

model Like {
  id        String   @id @default(cuid())
  planId    String
  userId    String
  createdAt DateTime @default(now())
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([planId, userId])
  @@index([userId])
  @@index([planId])
}

model Favorite {
  id        String   @id @default(cuid())
  planId    String
  userId    String
  note      String?
  createdAt DateTime @default(now())
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([planId, userId])
  @@index([userId, createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SiteSettings {
  id                      String       @id @default(cuid())
  siteTitle               String       @default("Zayıflama Planım")
  siteDescription         String
  logoUrl                 String?
  twitterUrl              String?
  instagramUrl            String?
  facebookUrl             String?
  footerText              String?
  maintenanceMode         Boolean      @default(false)
  updatedAt               DateTime     @updatedAt
  updatedBy               String
  footerAboutText         String?      @default("Gerçek insanların gerçek başarı hikayeleri. Sağlıklı yaşam için ilham alın.")
  footerAboutTitle        String?      @default("Hakkımızda")
  footerLinksTitle        String?      @default("Hızlı Bağlantılar")
  footerSocialTitle       String?      @default("Bizi Takip Edin")
  facebookAppId           String?
  facebookAppSecret       String?
  facebookOAuthEnabled    Boolean      @default(false)
  googleClientId          String?
  googleClientSecret      String?
  googleOAuthEnabled      Boolean      @default(false)
  googleAnalyticsId       String?
  googleSearchConsoleCode String?
  footerLinks             FooterLink[]
  updatedByUser           User         @relation(fields: [updatedBy], references: [id])
}

model FooterLink {
  id           String       @id @default(cuid())
  settingsId   String
  title        String
  url          String
  order        Int          @default(0)
  openInNewTab Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  settings     SiteSettings @relation(fields: [settingsId], references: [id], onDelete: Cascade)

  @@index([settingsId, order])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String   @default("#4caf50")
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  plans       Plan[]
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  plans     PlanTag[]
}

model PlanTag {
  id     String @id @default(cuid())
  planId String
  tagId  String
  plan   Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([planId, tagId])
}

model BannedWord {
  id        String   @id @default(cuid())
  word      String   @unique
  createdAt DateTime @default(now())
  createdBy String
  creator   User     @relation(fields: [createdBy], references: [id])
  
  @@index([createdBy])
}

model ActivityLog {
  id          String       @id @default(cuid())
  userId      String
  type        ActivityType
  targetId    String?
  targetType  String?
  description String
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([type, createdAt])
}

model EmailCampaign {
  id          String      @id @default(cuid())
  subject     String
  content     String
  recipients  String
  status      EmailStatus @default(DRAFT)
  sentCount   Int         @default(0)
  failedCount Int         @default(0)
  createdBy   String
  createdAt   DateTime    @default(now())
  sentAt      DateTime?
  creator     User        @relation(fields: [createdBy], references: [id])

  @@index([status, createdAt])
}

model Backup {
  id        String   @id @default(cuid())
  filename  String
  size      Int
  type      String   @default("manual")
  createdBy String?
  createdAt DateTime @default(now())
  creator   User?    @relation(fields: [createdBy], references: [id])
  
  @@index([createdAt])
  @@index([createdBy])
}

model Badge {
  id          String      @id @default(cuid())
  type        BadgeType   @unique
  name        String
  description String
  icon        String
  xpReward    Int         @default(0)
  createdAt   DateTime    @default(now())
  users       UserBadge[]
  
  @@index([type])
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())
  badge    Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([userId, earnedAt])
}

model Goal {
  id          String     @id @default(cuid())
  type        GoalType   @unique
  name        String
  description String
  target      Int
  xpReward    Int        @default(0)
  createdAt   DateTime   @default(now())
  users       UserGoal[]
  
  @@index([type])
}

model UserGoal {
  id          String    @id @default(cuid())
  userId      String
  goalId      String
  progress    Int       @default(0)
  completed   Boolean   @default(false)
  completedAt DateTime?
  startDate   DateTime  @default(now())
  endDate     DateTime
  goal        Goal      @relation(fields: [goalId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, goalId, startDate])
  @@index([userId, completed])
  @@index([goalId])
  @@index([endDate])
}

model WeightLog {
  id        String   @id @default(cuid())
  userId    String
  weight    Float
  note      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model CheckIn {
  id                  String               @id @default(cuid())
  userId              String
  weight              Float?
  energy              Int?
  motivation          Int?
  sleep               Int?
  water               Int?
  exercise            Boolean              @default(false)
  dietPlan            Boolean              @default(false)
  note                String?
  createdAt           DateTime             @default(now())
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  partnershipCheckIns PartnershipCheckIn[]

  @@index([userId, createdAt])
}

model ProgressPhoto {
  id          String   @id @default(cuid())
  userId      String
  imageUrl    String
  weight      Float?
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Measurement {
  id        String   @id @default(cuid())
  userId    String
  chest     Float?
  waist     Float?
  hips      Float?
  thigh     Float?
  arm       Float?
  neck      Float?
  note      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model MoodLog {
  id        String   @id @default(cuid())
  userId    String
  mood      Int
  stress    Int?
  note      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Collection {
  id          String           @id @default(cuid())
  userId      String
  name        String
  description String?
  isPublic    Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  plans       CollectionPlan[]

  @@index([userId, createdAt])
}

model CollectionPlan {
  id           String     @id @default(cuid())
  collectionId String
  planId       String
  order        Int        @default(0)
  note         String?
  createdAt    DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  plan         Plan       @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([collectionId, planId])
  @@index([collectionId, order])
}

model Follow {
  id          String       @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime     @default(now())
  acceptedAt  DateTime?
  rejectedAt  DateTime?
  status      FollowStatus @default(PENDING)
  follower    User         @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User         @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@index([status])
  @@index([followingId, status])
}

model SeoSettings {
  id        Int      @id @default(1)
  settings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccountabilityPartnership {
  id          String               @id @default(cuid())
  requesterId String
  partnerId   String
  status      PartnershipStatus    @default(PENDING)
  message     String?
  createdAt   DateTime             @default(now())
  acceptedAt  DateTime?
  endedAt     DateTime?
  partner     User                 @relation("PartnerReceiver", fields: [partnerId], references: [id], onDelete: Cascade)
  requester   User                 @relation("PartnerRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  checkIns    PartnershipCheckIn[]
  sharedGoals PartnershipGoal[]
  messages    PartnershipMessage[]

  @@unique([requesterId, partnerId])
  @@index([requesterId, status])
  @@index([partnerId, status])
}

model PartnershipGoal {
  id            String                    @id @default(cuid())
  partnershipId String
  title         String
  description   String?
  targetDate    DateTime
  completed     Boolean                   @default(false)
  completedAt   DateTime?
  createdBy     String
  createdAt     DateTime                  @default(now())
  partnership   AccountabilityPartnership @relation(fields: [partnershipId], references: [id], onDelete: Cascade)

  @@index([partnershipId, completed])
}

model PartnershipMessage {
  id            String                    @id @default(cuid())
  partnershipId String
  senderId      String
  content       String
  isRead        Boolean                   @default(false)
  readAt        DateTime?
  createdAt     DateTime                  @default(now())
  partnership   AccountabilityPartnership @relation(fields: [partnershipId], references: [id], onDelete: Cascade)

  @@index([partnershipId, createdAt])
  @@index([senderId])
}

model PartnershipCheckIn {
  id            String                    @id @default(cuid())
  partnershipId String
  checkInId     String
  supportNote   String?
  createdAt     DateTime                  @default(now())
  checkIn       CheckIn                   @relation(fields: [checkInId], references: [id], onDelete: Cascade)
  partnership   AccountabilityPartnership @relation(fields: [partnershipId], references: [id], onDelete: Cascade)

  @@index([partnershipId, createdAt])
}

model Poll {
  id            String       @id @default(cuid())
  question      String
  description   String?
  isActive      Boolean      @default(true)
  isPublic      Boolean      @default(true)
  allowMultiple Boolean      @default(false)
  endsAt        DateTime?
  createdBy     String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  creator       User         @relation(fields: [createdBy], references: [id])
  options       PollOption[]
  votes         PollVote[]

  @@index([isActive, createdAt])
  @@index([createdBy])
}

model PollOption {
  id        String     @id @default(cuid())
  pollId    String
  text      String
  order     Int        @default(0)
  createdAt DateTime   @default(now())
  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes     PollVote[]

  @@index([pollId, order])
}

model PollVote {
  id        String     @id @default(cuid())
  pollId    String
  optionId  String
  userId    String
  createdAt DateTime   @default(now())
  option    PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  voter     User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pollId, optionId, userId])
  @@index([pollId])
  @@index([userId])
}

model CrisisButton {
  id         String    @id @default(cuid())
  userId     String
  trigger    String
  resolved   Boolean   @default(false)
  resolvedAt DateTime?
  note       String?
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([trigger])
}

model WallPost {
  id        String   @id @default(cuid())
  userId    String
  authorId  String
  content   String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation("WallPostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  user      User     @relation("WallPostOwner", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([authorId])
}

model Food {
  id          String      @id @default(cuid())
  name        String
  nameEn      String?
  category    String
  calories    Float
  protein     Float?
  carbs       Float?
  fat         Float?
  fiber       Float?
  servingSize Float       @default(100)
  isCommon    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  mealEntries MealEntry[]

  @@index([category])
  @@index([isCommon])
  @@index([name])
}

model Meal {
  id            String      @id @default(cuid())
  userId        String
  date          DateTime
  mealType      String
  totalCalories Float       @default(0)
  totalProtein  Float       @default(0)
  totalCarbs    Float       @default(0)
  totalFat      Float       @default(0)
  note          String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries       MealEntry[]

  @@index([userId, date])
  @@index([mealType])
}

model MealEntry {
  id        String   @id @default(cuid())
  mealId    String
  foodId    String?
  foodName  String
  amount    Float
  calories  Float
  protein   Float?
  carbs     Float?
  fat       Float?
  createdAt DateTime @default(now())
  food      Food?    @relation(fields: [foodId], references: [id])
  meal      Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)

  @@index([mealId])
  @@index([foodId])
}

model CalorieGoal {
  id            String   @id @default(cuid())
  userId        String   @unique
  dailyCalories Int
  dailyProtein  Int?
  dailyCarbs    Int?
  dailyFat      Int?
  activityLevel String   @default("sedentary")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShoppingList {
  id          String             @id @default(cuid())
  userId      String
  planId      String?
  name        String
  description String?
  weekNumber  Int?
  isCompleted Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  items       ShoppingListItem[]

  @@index([userId, createdAt])
  @@index([planId])
  @@index([userId, isCompleted])
}

model ShoppingListItem {
  id             String       @id @default(cuid())
  shoppingListId String
  category       String
  name           String
  quantity       String
  isChecked      Boolean      @default(false)
  note           String?
  estimatedPrice Float?
  order          Int          @default(0)
  createdAt      DateTime     @default(now())
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)

  @@index([shoppingListId, category, order])
}

model Recipe {
  id              String           @id @default(cuid())
  userId          String
  title           String
  slug            String           @unique
  description     String
  ingredients     String
  instructions    String
  prepTime        Int?
  cookTime        Int?
  servings        Int?
  difficulty      String?
  category        String
  calories        Float?
  protein         Float?
  carbs           Float?
  fat             Float?
  status          RecipeStatus     @default(PENDING)
  rejectionReason String?
  views           Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  comments        RecipeComment[]
  favorites       RecipeFavorite[]
  images          RecipeImage[]
  likes           RecipeLike[]

  @@index([userId, status])
  @@index([status, createdAt])
  @@index([category])
  @@index([slug])
  @@index([status, views])
}

model RecipeImage {
  id        String   @id @default(cuid())
  recipeId  String
  url       String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId, order])
}

model RecipeLike {
  id        String   @id @default(cuid())
  recipeId  String
  userId    String
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, userId])
  @@index([userId])
  @@index([recipeId])
}

model RecipeComment {
  id        String   @id @default(cuid())
  recipeId  String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([recipeId, createdAt])
  @@index([userId])
}

model RecipeFavorite {
  id        String   @id @default(cuid())
  recipeId  String
  userId    String
  note      String?
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, userId])
  @@index([userId, createdAt])
}

model Page {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  content         String
  excerpt         String?
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  ogImage         String?
  isPublished     Boolean   @default(false)
  showInFooter    Boolean   @default(false)
  showInNavbar    Boolean   @default(false)
  showInTopNavbar Boolean   @default(false)
  order           Int       @default(0)
  views           Int       @default(0)
  createdBy       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  publishedAt     DateTime?

  @@index([slug])
  @@index([isPublished, order])
  @@index([showInFooter, order])
  @@index([showInNavbar, order])
  @@index([showInTopNavbar, order])
}

model ChallengeLeaderboard {
  id          String    @id @default(cuid())
  challengeId String
  userId      String
  score       Float
  rank        Int
  updatedAt   DateTime  @updatedAt
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([challengeId, userId])
  @@index([challengeId, rank])
  @@index([userId])
}

model FriendSuggestion {
  id          String   @id @default(cuid())
  userId      String
  suggestedId String
  reason      String
  score       Float
  dismissed   Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@unique([userId, suggestedId])
  @@index([userId, dismissed])
  @@index([score])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  actionUrl String?
  isRead    Boolean          @default(false)
  readAt    DateTime?
  actorId   String?
  relatedId String?
  metadata  Json?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead, createdAt])
  @@index([userId, createdAt])
  @@index([type])
}

model NotificationPreference {
  id                  String   @id @default(cuid())
  userId              String   @unique
  emailNewFollower    Boolean  @default(true)
  emailComment        Boolean  @default(true)
  emailLike           Boolean  @default(true)
  emailBadge          Boolean  @default(true)
  emailPartnerRequest Boolean  @default(true)
  emailWeeklyDigest   Boolean  @default(true)
  pushNewFollower     Boolean  @default(true)
  pushComment         Boolean  @default(true)
  pushLike            Boolean  @default(false)
  pushBadge           Boolean  @default(true)
  pushPartnerRequest  Boolean  @default(true)
  inAppNewFollower    Boolean  @default(true)
  inAppComment        Boolean  @default(true)
  inAppLike           Boolean  @default(true)
  inAppBadge          Boolean  @default(true)
  inAppPartnerRequest Boolean  @default(true)
  quietHoursStart     Int?
  quietHoursEnd       Int?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PushSubscription {
  id         String   @id @default(cuid())
  userId     String
  endpoint   String   @unique
  p256dh     String
  auth       String
  userAgent  String?
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model WebVitals {
  id             String   @id @default(cuid())
  metricName     String
  value          Int
  rating         String
  delta          Int
  metricId       String
  navigationType String?
  userAgent      String
  url            String
  createdAt      DateTime @default(now())

  @@index([metricName])
  @@index([createdAt])
  @@index([rating])
}

model BlogPost {
  id               String         @id @default(cuid())
  title            String
  slug             String         @unique
  excerpt          String
  content          String
  featuredImage    String?
  authorId         String
  categoryId       String?
  status           BlogStatus     @default(DRAFT)
  isPublished      Boolean        @default(false)
  publishedAt      DateTime?
  metaTitle        String?
  metaDescription  String?
  metaKeywords     String?
  views            Int            @default(0)
  readTime         Int?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  authorName       String         @default("Admin")
  featuredImageAlt String?
  comments         BlogComment[]
  category         BlogCategory?  @relation(fields: [categoryId], references: [id])
  tags             BlogPostTag[]
  reactions        BlogReaction[]

  @@index([slug])
  @@index([status, publishedAt])
  @@index([categoryId, status])
  @@index([authorId])
}

model BlogCategory {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  color       String     @default("#10b981")
  order       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  posts       BlogPost[]

  @@index([slug])
  @@index([order])
}

model BlogTag {
  id        String        @id @default(cuid())
  name      String        @unique
  slug      String        @unique
  createdAt DateTime      @default(now())
  posts     BlogPostTag[]

  @@index([slug])
}

model BlogPostTag {
  id     String   @id @default(cuid())
  postId String
  tagId  String
  post   BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    BlogTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@index([postId])
  @@index([tagId])
}

model BlogComment {
  id         String   @id @default(cuid())
  postId     String
  authorId   String
  content    String
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  post       BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId, isApproved, createdAt])
  @@index([authorId])
}

model BlogReaction {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  emoji     String
  createdAt DateTime @default(now())
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId, emoji])
  @@index([postId])
  @@index([userId])
}

model CheatMeal {
  id        String    @id @default(cuid())
  userId    String
  type      CheatType
  note      String?
  date      DateTime  @default(now())
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([type])
}

model CheatChallenge {
  id        String   @id @default(cuid())
  userId    String
  weekStart DateTime
  weekEnd   DateTime
  limit     Int      @default(2)
  penalty   String?
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, weekStart])
  @@index([userId, weekStart])
}

model ProfileCustomization {
  id                  String   @id @default(cuid())
  userId              String   @unique
  activeFrame         String?
  activeBackground    String?
  activeTheme         String?
  activeBadges        String[]
  unlockedFrames      String[]
  unlockedBackgrounds String[]
  unlockedThemes      String[]
  unlockedBadges      String[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CustomizationItem {
  id              String            @id @default(cuid())
  type            CustomizationType
  code            String            @unique
  name            String
  description     String?
  imageUrl        String?
  previewUrl      String?
  cssClass        String?
  colors          Json?
  unlockCondition String
  badgeType       BadgeType?
  badgeCount      Int?
  level           Int?
  xpRequired      Int?
  isDefault       Boolean           @default(false)
  isSpecial       Boolean           @default(false)
  order           Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([type, order])
  @@index([badgeType])
  @@index([isDefault])
}

model Confession {
  id              String               @id @default(cuid())
  userId          String
  text            String
  aiReply         String?
  isAnonymous     Boolean              @default(true)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  approvedAt      DateTime?
  approvedBy      String?
  rejectionReason String?
  status          ConfessionStatus     @default(PENDING)
  comments        ConfessionComment[]
  likes           ConfessionLike[]
  reactions       ConfessionReaction[]

  @@index([createdAt])
  @@index([userId])
  @@index([status, createdAt])
  @@index([approvedBy])
}

model ConfessionLike {
  id           String     @id @default(cuid())
  confessionId String
  userId       String
  createdAt    DateTime   @default(now())
  confession   Confession @relation(fields: [confessionId], references: [id], onDelete: Cascade)

  @@unique([confessionId, userId])
  @@index([confessionId])
  @@index([userId])
}

model ConfessionComment {
  id           String        @id @default(cuid())
  confessionId String
  userId       String
  content      String
  isAnonymous  Boolean       @default(true)
  createdAt    DateTime      @default(now())
  status       CommentStatus @default(PENDING)
  confession   Confession    @relation(fields: [confessionId], references: [id], onDelete: Cascade)

  @@index([confessionId, createdAt])
  @@index([userId])
  @@index([status])
}

model ConfessionReaction {
  id           String     @id @default(cuid())
  confessionId String
  userId       String
  emoji        String
  createdAt    DateTime   @default(now())
  confession   Confession @relation(fields: [confessionId], references: [id], onDelete: Cascade)

  @@unique([confessionId, userId, emoji])
  @@index([confessionId])
  @@index([userId])
}

model PromoSection {
  id         String           @id @default(cuid())
  type       PromoSectionType
  title      String
  subtitle   String?
  content    String?
  imageUrl   String?
  videoUrl   String?
  buttonText String?
  buttonUrl  String?
  order      Int              @default(0)
  isActive   Boolean          @default(true)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@index([type, order])
  @@index([isActive])
}

model PromoFeature {
  id          String   @id @default(cuid())
  icon        String
  title       String
  description String
  color       String   @default("#10b981")
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  link        String?

  @@index([order])
  @@index([isActive])
}

model MicroCopy {
  id        String   @id @default(cuid())
  key       String   @unique
  location  String
  text      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([location])
  @@index([isActive])
}

model UserStory {
  id           String   @id @default(cuid())
  name         String
  beforeImage  String?
  afterImage   String?
  beforeWeight Int?
  afterWeight  Int?
  duration     String?
  story        String
  quote        String?
  isActive     Boolean  @default(true)
  isFeatured   Boolean  @default(false)
  order        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([isActive, order])
  @@index([isFeatured])
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  avatar    String?
  role      String?
  text      String
  rating    Int      @default(5)
  isActive  Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive, order])
}

model Group {
  id              String              @id @default(cuid())
  name            String
  slug            String              @unique
  description     String
  imageUrl        String?
  goalType        String
  targetWeight    Int?
  isPrivate       Boolean             @default(false)
  maxMembers      Int?
  status          GroupStatus         @default(PENDING)
  rejectionReason String?
  createdBy       String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  approvedAt      DateTime?
  level           GroupLevel?
  gender          GroupGender?
  ageGroup        GroupAgeGroup?
  challenges      Challenge[]
  events          GroupEvent[]
  joinRequests    GroupJoinRequest[]
  leaderboard     GroupLeaderboard[]
  members         GroupMember[]
  messages        GroupMessage[]
  posts           GroupPost[]
  resources       GroupResource[]
  stats           GroupStats?
  statsHistory    GroupStatsHistory[]
  weeklyGoals     GroupWeeklyGoal[]

  @@index([status, createdAt])
  @@index([goalType])
  @@index([slug])
  @@index([level])
  @@index([gender])
  @@index([ageGroup])
  @@index([createdBy])
  @@index([status, goalType])
  @@index([isPrivate, status])
}

model GroupMember {
  id           String          @id @default(cuid())
  groupId      String
  userId       String
  role         GroupMemberRole @default(MEMBER)
  joinedAt     DateTime        @default(now())
  lastActiveAt DateTime?
  permissions  Json?
  group        Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user         User            @relation("GroupMembers", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@index([userId])
  @@index([groupId, role])
  @@index([groupId, lastActiveAt])
}

model GroupJoinRequest {
  id        String            @id @default(cuid())
  groupId   String
  userId    String
  message   String?
  status    JoinRequestStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  group     Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@index([userId, status])
  @@index([groupId, status])
}

model GroupPost {
  id        String             @id @default(cuid())
  groupId   String
  userId    String
  content   String
  imageUrl  String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  metadata  Json?
  postType  GroupPostType      @default(UPDATE)
  group     Group              @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User               @relation("GroupPosts", fields: [userId], references: [id], onDelete: Cascade)
  comments  GroupPostComment[]
  likes     GroupPostLike[]

  @@index([groupId, createdAt])
  @@index([userId])
  @@index([postType])
  @@index([groupId, postType, createdAt])
}

model GroupPostLike {
  id        String    @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime  @default(now())
  post      GroupPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation("GroupPostLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
}

model GroupPostComment {
  id        String    @id @default(cuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime  @default(now())
  post      GroupPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation("GroupPostComments", fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId, createdAt])
  @@index([userId])
}

model GroupMessage {
  id          String           @id @default(cuid())
  groupId     String
  userId      String
  content     String
  messageType GroupMessageType @default(TEXT)
  metadata    Json?
  createdAt   DateTime         @default(now())
  group       Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user        User             @relation("GroupMessages", fields: [userId], references: [id], onDelete: Cascade)

  @@index([groupId, createdAt])
  @@index([userId])
  @@index([messageType])
}

model GroupEvent {
  id              String                  @id @default(cuid())
  groupId         String
  title           String
  description     String?
  eventType       GroupEventType
  startDate       DateTime
  endDate         DateTime?
  location        String?
  maxParticipants Int?
  createdBy       String
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  creator         User                    @relation("GroupEvents", fields: [createdBy], references: [id])
  group           Group                   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  participants    GroupEventParticipant[]

  @@index([groupId, startDate])
  @@index([createdBy])
  @@index([eventType])
  @@index([startDate])
}

model GroupEventParticipant {
  id       String            @id @default(cuid())
  eventId  String
  userId   String
  status   ParticipantStatus @default(GOING)
  joinedAt DateTime          @default(now())
  event    GroupEvent        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user     User              @relation("GroupEventParticipants", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([userId])
  @@index([eventId, status])
}

model GroupLeaderboard {
  id              String            @id @default(cuid())
  groupId         String
  userId          String
  period          LeaderboardPeriod
  periodStart     DateTime
  periodEnd       DateTime
  activityScore   Int               @default(0)
  weightLossScore Float             @default(0)
  streakScore     Int               @default(0)
  totalScore      Float             @default(0)
  rank            Int?
  updatedAt       DateTime          @updatedAt
  group           Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user            User              @relation("GroupLeaderboard", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId, period, periodStart])
  @@index([groupId, period, totalScore])
  @@index([userId])
  @@index([groupId, period, rank])
  @@index([periodStart, periodEnd])
}

model GroupStats {
  id              String   @id @default(cuid())
  groupId         String   @unique
  totalMembers    Int      @default(0)
  activeMembers   Int      @default(0)
  totalWeightLoss Float    @default(0)
  avgWeightLoss   Float    @default(0)
  totalPosts      Int      @default(0)
  totalMessages   Int      @default(0)
  activeRate      Float    @default(0)
  lastCalculated  DateTime @updatedAt
  group           Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId])
}

model GroupStatsHistory {
  id              String   @id @default(cuid())
  groupId         String
  date            DateTime
  activeMembers   Int
  totalWeightLoss Float
  postsCount      Int
  messagesCount   Int
  group           Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, date])
  @@index([groupId, date])
}

model GroupResource {
  id           String            @id @default(cuid())
  groupId      String
  title        String
  description  String?
  resourceType GroupResourceType
  url          String?
  fileUrl      String?
  content      String?
  category     String
  tags         String[]
  views        Int               @default(0)
  uploadedBy   String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  group        Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  uploader     User              @relation("GroupResources", fields: [uploadedBy], references: [id])

  @@index([groupId, category])
  @@index([groupId, views])
  @@index([resourceType])
  @@index([uploadedBy])
}

model GroupWeeklyGoal {
  id           String              @id @default(cuid())
  groupId      String
  weekStart    DateTime
  weekEnd      DateTime
  title        String
  description  String?
  targetType   String
  targetValue  Float
  currentValue Float               @default(0)
  completed    Boolean             @default(false)
  createdBy    String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  progress     GroupGoalProgress[]
  creator      User                @relation("GroupWeeklyGoals", fields: [createdBy], references: [id])
  group        Group               @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, weekStart])
  @@index([groupId, weekStart])
  @@index([groupId, completed])
  @@index([weekStart, weekEnd])
}

model GroupGoalProgress {
  id        String          @id @default(cuid())
  goalId    String
  userId    String
  value     Float
  createdAt DateTime        @default(now())
  goal      GroupWeeklyGoal @relation(fields: [goalId], references: [id], onDelete: Cascade)
  user      User            @relation("GroupGoalProgress", fields: [userId], references: [id], onDelete: Cascade)

  @@index([goalId, userId])
  @@index([userId])
  @@index([goalId, createdAt])
}

model Challenge {
  id           String                 @id @default(cuid())
  groupId      String?
  title        String
  description  String
  type         ChallengeType
  target       Float
  unit         String
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean                @default(true)
  createdBy    String
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  creator      User                   @relation(fields: [createdBy], references: [id])
  group        Group?                 @relation(fields: [groupId], references: [id], onDelete: Cascade)
  leaderboard  ChallengeLeaderboard[]
  participants ChallengeParticipant[]

  @@index([groupId, isActive])
  @@index([type, isActive])
  @@index([startDate, endDate])
  @@index([createdBy])
  @@index([isActive, startDate])
}

model ChallengeParticipant {
  id          String    @id @default(cuid())
  challengeId String
  userId      String
  progress    Float     @default(0)
  completed   Boolean   @default(false)
  completedAt DateTime?
  joinedAt    DateTime  @default(now())
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([challengeId, userId])
  @@index([userId])
  @@index([challengeId, completed])
}

enum PlanStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  USER
  ADMIN
}

enum ActivityType {
  PLAN_APPROVED
  PLAN_REJECTED
  PLAN_DELETED
  USER_ROLE_CHANGED
  USER_DELETED
  COMMENT_DELETED
  SETTINGS_UPDATED
  CATEGORY_CREATED
  CATEGORY_UPDATED
  CATEGORY_DELETED
  TAG_CREATED
  TAG_DELETED
  EMAIL_SENT
  BACKUP_CREATED
  CACHE_CLEARED
  RECIPE_APPROVED
  RECIPE_REJECTED
  RECIPE_DELETED
  GROUP_APPROVED
  GROUP_REJECTED
  GROUP_DELETED
  CHALLENGE_CREATED
  CHALLENGE_DELETED
}

enum EmailStatus {
  DRAFT
  QUEUED
  SENDING
  SENT
  FAILED
}

enum BadgeType {
  FIRST_PLAN
  LIKES_10
  LIKES_50
  LIKES_100
  VIEWS_100
  VIEWS_500
  VIEWS_1000
  COMMENTS_10
  COMMENTS_50
  ACTIVE_7_DAYS
  ACTIVE_30_DAYS
  ACTIVE_100_DAYS
  PLANS_5
  PLANS_10
  PLANS_25
  EARLY_ADOPTER
  COMMUNITY_HELPER
  WEIGHT_LOSS_HERO
  FIRST_PARTNER
  SUPPORTIVE_PARTNER
  GOAL_ACHIEVER
  LONG_TERM_PARTNER
  MOTIVATOR
  PROFILE_COMPLETE
  FIRST_RECIPE
  RECIPES_5
  RECIPES_10
  RECIPES_25
  RECIPE_LIKES_10
  RECIPE_LIKES_50
  RECIPE_LIKES_100
  RECIPE_MASTER
  RECIPE_VIEWS_100
  RECIPE_VIEWS_500
  RECIPE_COMMENTS_10
  RECIPE_COMMENTS_25
  GROUP_CREATOR
  GROUP_ADMIN
  CHALLENGE_WINNER
  CHALLENGE_PARTICIPANT
  SOCIAL_BUTTERFLY
  CHEAT_FREE_7_DAYS
  CHEAT_FREE_30_DAYS
  FAST_FOOD_FREE_30_DAYS
  BALANCED_RECOVERY
}

enum GoalType {
  DAILY_LOGIN
  WEEKLY_PLAN
  WEEKLY_COMMENT
  WEEKLY_LIKE
  MONTHLY_ACTIVE
  WEEKLY_RECIPE
  MONTHLY_RECIPE
  WEEKLY_RECIPE_COMMENT
  MONTHLY_RECIPE_SHARE
}

enum PartnershipStatus {
  PENDING
  ACTIVE
  ENDED
  REJECTED
}

enum RecipeStatus {
  PENDING
  APPROVED
  REJECTED
}

enum GroupStatus {
  PENDING
  APPROVED
  REJECTED
}

enum GroupLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum GroupGender {
  MALE
  FEMALE
  MIXED
}

enum GroupAgeGroup {
  AGE_18_25
  AGE_26_35
  AGE_36_45
  AGE_46_PLUS
}

enum GroupMemberRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum GroupPostType {
  UPDATE
  ACHIEVEMENT
  MOTIVATION
  PROGRESS
  PHOTO
}

enum GroupMessageType {
  TEXT
  EMOJI
  GIF
  SYSTEM
}

enum GroupEventType {
  MEETUP
  WEBINAR
  WORKSHOP
  CHALLENGE
  OTHER
}

enum ParticipantStatus {
  GOING
  MAYBE
  NOT_GOING
}

enum LeaderboardPeriod {
  WEEKLY
  MONTHLY
  ALL_TIME
}

enum GroupResourceType {
  VIDEO
  RECIPE
  EXERCISE
  PDF
  ARTICLE
  LINK
}

enum ChallengeType {
  WEIGHT_LOSS
  ACTIVITY
  STREAK
  CHECK_IN
  RECIPE_SHARE
  PLAN_SHARE
}

enum FollowStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum NotificationType {
  NEW_FOLLOWER
  COMMENT
  LIKE
  BADGE_EARNED
  PARTNER_REQUEST
  PARTNER_ACCEPTED
  RECIPE_APPROVED
  RECIPE_REJECTED
  PLAN_APPROVED
  PLAN_REJECTED
  GROUP_INVITE
  CHALLENGE_INVITE
  WALL_POST
  MENTION
  LEVEL_UP
  COMMENT_REACTION
  FOLLOW_REQUEST
  FOLLOW_ACCEPTED
  RECIPE_COMMENT
  RECIPE_LIKE
  PLAN_COMMENT
  PLAN_LIKE
  GROUP_NEW_POST
  GROUP_NEW_COMMENT
  GROUP_NEW_MESSAGE
  GROUP_POST_LIKE
  GROUP_EVENT_CREATED
  GROUP_EVENT_REMINDER
  GROUP_MEMBER_JOINED
  GROUP_ROLE_CHANGED
  GROUP_WEEKLY_GOAL
  GROUP_LEADERBOARD_RANK
  GROUP_JOIN_REQUEST
  GROUP_JOIN_APPROVED
  GROUP_JOIN_REJECTED
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
}

enum CheatType {
  SWEET
  FAST_FOOD
  SODA
  ALCOHOL
  OTHER
}

enum CustomizationType {
  FRAME
  BACKGROUND
  THEME
  BADGE
  ANIMATION
}

enum ConfessionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PromoSectionType {
  HERO
  VIDEO
  FEATURES
  HOW_IT_WORKS
  TESTIMONIALS
  CTA
  STATS
}
