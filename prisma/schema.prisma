// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PlanStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  USER
  ADMIN
}

enum ActivityType {
  PLAN_APPROVED
  PLAN_REJECTED
  PLAN_DELETED
  USER_ROLE_CHANGED
  USER_DELETED
  COMMENT_DELETED
  SETTINGS_UPDATED
  CATEGORY_CREATED
  CATEGORY_UPDATED
  CATEGORY_DELETED
  TAG_CREATED
  TAG_DELETED
  EMAIL_SENT
  BACKUP_CREATED
  CACHE_CLEARED
}

enum EmailStatus {
  DRAFT
  QUEUED
  SENDING
  SENT
  FAILED
}

enum BadgeType {
  FIRST_PLAN
  LIKES_10
  LIKES_50
  LIKES_100
  VIEWS_100
  VIEWS_500
  VIEWS_1000
  COMMENTS_10
  COMMENTS_50
  ACTIVE_7_DAYS
  ACTIVE_30_DAYS
  ACTIVE_100_DAYS
  PLANS_5
  PLANS_10
  PLANS_25
  EARLY_ADOPTER
  COMMUNITY_HELPER
  WEIGHT_LOSS_HERO
  FIRST_PARTNER
  SUPPORTIVE_PARTNER
  GOAL_ACHIEVER
  LONG_TERM_PARTNER
  MOTIVATOR
  PROFILE_COMPLETE
}

enum GoalType {
  DAILY_LOGIN
  WEEKLY_PLAN
  WEEKLY_COMMENT
  WEEKLY_LIKE
  MONTHLY_ACTIVE
}

enum PartnershipStatus {
  PENDING
  ACTIVE
  ENDED
  REJECTED
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  username         String?           @unique // Kullanƒ±cƒ± adƒ± (profil URL i√ßin)
  passwordHash     String?
  name             String?
  image            String? // avatar
  bio              String?           @db.Text
  city             String?           // ≈ûehir bilgisi (analytics i√ßin)
  startWeight      Int?
  goalWeight       Int?
  instagram        String?
  twitter          String?
  youtube          String?
  tiktok           String?
  website          String?
  role             Role              @default(USER)
  xp               Int               @default(0)
  level            Int               @default(1)
  streak           Int               @default(0)
  lastActiveDate   DateTime?
  accounts         Account[]
  sessions         Session[]
  plans            Plan[]
  comments         Comment[]
  commentReactions CommentReaction[]
  likes            Like[]
  favorites        Favorite[]
  collections      Collection[]
  activityLogs     ActivityLog[]
  emailCampaigns   EmailCampaign[]
  bannedWords      BannedWord[]
  siteSettings     SiteSettings[]
  backups          Backup[]
  badges           UserBadge[]
  goals            UserGoal[]
  weightLogs       WeightLog[]
  checkIns         CheckIn[]
  progressPhotos   ProgressPhoto[]
  measurements     Measurement[]
  moodLogs         MoodLog[]
  following        Follow[]          @relation("UserFollowing")
  followers        Follow[]          @relation("UserFollowers")
  polls            Poll[]
  pollVotes        PollVote[]
  partnerRequests  AccountabilityPartnership[] @relation("PartnerRequester")
  partnerReceived  AccountabilityPartnership[] @relation("PartnerReceiver")
  crisisButtons    CrisisButton[]
  wallPosts        WallPost[]        @relation("WallPostOwner")
  wallPostsWritten WallPost[]        @relation("WallPostAuthor")
  meals            Meal[]
  calorieGoal      CalorieGoal?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([xp, level])
}

model Plan {
  id              String            @id @default(cuid())
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  title           String
  slug            String            @unique
  startWeight     Int
  goalWeight      Int
  durationText    String
  routine         String            @db.Text
  diet            String            @db.Text
  exercise        String            @db.Text
  motivation      String
  imageUrl        String?
  videoUrl        String?           // YouTube/Vimeo URL
  status          PlanStatus        @default(PENDING)
  rejectionReason String?           @db.Text
  views           Int               @default(0)
  categoryId      String?
  category        Category?         @relation(fields: [categoryId], references: [id])
  tags            PlanTag[]
  likes           Like[]
  favorites       Favorite[]
  comments        Comment[]
  collectionPlans CollectionPlan[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([status, createdAt])
  @@index([slug])
  @@index([goalWeight, startWeight])
  @@index([categoryId])
}

model Comment {
  id        String            @id @default(cuid())
  planId    String
  plan      Plan              @relation(fields: [planId], references: [id], onDelete: Cascade)
  userId    String
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  body      String            @db.Text
  reactions CommentReaction[]
  createdAt DateTime          @default(now())
}

model CommentReaction {
  id        String   @id @default(cuid())
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emoji     String   // üí™, üî•, üëè, ‚ù§Ô∏è, üòä
  createdAt DateTime @default(now())

  @@unique([commentId, userId, emoji])
  @@index([commentId])
  @@index([userId])
}

model Like {
  id        String   @id @default(cuid())
  planId    String
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([planId, userId])
}

model Favorite {
  id        String   @id @default(cuid())
  planId    String
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  note      String?  @db.Text
  createdAt DateTime @default(now())

  @@unique([planId, userId])
  @@index([userId, createdAt])
}

// NextAuth default models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

// Site ayarlarƒ±
model SiteSettings {
  id              String   @id @default(cuid())
  siteTitle       String   @default("Zayƒ±flama Planƒ±m")
  siteDescription String   @db.Text
  logoUrl         String?
  twitterUrl      String?
  instagramUrl    String?
  facebookUrl     String?
  footerText      String?  @db.Text
  maintenanceMode Boolean  @default(false)
  updatedAt       DateTime @updatedAt
  updatedBy       String
  updatedByUser   User     @relation(fields: [updatedBy], references: [id])
}

// Kategoriler
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?  @db.Text
  color       String   @default("#4caf50")
  order       Int      @default(0)
  plans       Plan[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Etiketler
model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  plans     PlanTag[]
  createdAt DateTime  @default(now())
}

// Plan-Tag ili≈ükisi (many-to-many)
model PlanTag {
  id     String @id @default(cuid())
  planId String
  tagId  String
  plan   Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([planId, tagId])
}

// Yasaklƒ± kelimeler
model BannedWord {
  id        String   @id @default(cuid())
  word      String   @unique
  createdAt DateTime @default(now())
  createdBy String
  creator   User     @relation(fields: [createdBy], references: [id])
}

// Aktivite logu
model ActivityLog {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  type        ActivityType
  targetId    String?
  targetType  String?
  description String       @db.Text
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime     @default(now())

  @@index([userId, createdAt])
  @@index([type, createdAt])
}

// Email kampanyalarƒ±
model EmailCampaign {
  id          String      @id @default(cuid())
  subject     String
  content     String      @db.Text
  recipients  String
  status      EmailStatus @default(DRAFT)
  sentCount   Int         @default(0)
  failedCount Int         @default(0)
  createdBy   String
  creator     User        @relation(fields: [createdBy], references: [id])
  createdAt   DateTime    @default(now())
  sentAt      DateTime?

  @@index([status, createdAt])
}

// Veritabanƒ± yedekleri
model Backup {
  id        String   @id @default(cuid())
  filename  String
  size      Int
  type      String   @default("manual")
  createdBy String?
  creator   User?    @relation(fields: [createdBy], references: [id])
  createdAt DateTime @default(now())
}

// Gamification - Rozetler
model Badge {
  id          String      @id @default(cuid())
  type        BadgeType   @unique
  name        String
  description String      @db.Text
  icon        String
  xpReward    Int         @default(0)
  users       UserBadge[]
  createdAt   DateTime    @default(now())
}

// Kullanƒ±cƒ± rozetleri
model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badgeId   String
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  earnedAt  DateTime @default(now())

  @@unique([userId, badgeId])
  @@index([userId, earnedAt])
}

// Hedefler
model Goal {
  id          String     @id @default(cuid())
  type        GoalType   @unique
  name        String
  description String     @db.Text
  target      Int
  xpReward    Int        @default(0)
  users       UserGoal[]
  createdAt   DateTime   @default(now())
}

// Kullanƒ±cƒ± hedefleri
model UserGoal {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalId      String
  goal        Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
  progress    Int      @default(0)
  completed   Boolean  @default(false)
  completedAt DateTime?
  startDate   DateTime @default(now())
  endDate     DateTime

  @@unique([userId, goalId, startDate])
  @@index([userId, completed])
}

// Analitik & Takip Modelleri

// Kilo takibi
model WeightLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  weight    Float    // kg cinsinden
  note      String?  @db.Text
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

// Check-in sistemi
model CheckIn {
  id                  String                @id @default(cuid())
  userId              String
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  weight              Float?                // kg
  energy              Int?                  // 1-5 arasƒ± enerji seviyesi
  motivation          Int?                  // 1-5 arasƒ± motivasyon
  sleep               Int?                  // saat cinsinden uyku
  water               Int?                  // bardak cinsinden su t√ºketimi
  exercise            Boolean               @default(false)
  dietPlan            Boolean               @default(false)
  note                String?               @db.Text
  partnershipCheckIns PartnershipCheckIn[]
  createdAt           DateTime              @default(now())

  @@index([userId, createdAt])
}

// ƒ∞lerleme fotoƒüraflarƒ±
model ProgressPhoto {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageUrl    String
  weight      Float?   // fotoƒüraf √ßekildiƒüinde kilo
  description String?  @db.Text
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId, createdAt])
}

// V√ºcut √∂l√ß√ºmleri
model Measurement {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chest     Float?   // g√∂ƒü√ºs (cm)
  waist     Float?   // bel (cm)
  hips      Float?   // kal√ßa (cm)
  thigh     Float?   // uyluk (cm)
  arm       Float?   // kol (cm)
  neck      Float?   // boyun (cm)
  note      String?  @db.Text
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

// Ruh hali takibi
model MoodLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mood      Int      // 1-5 arasƒ± (1: √ßok k√∂t√º, 5: harika)
  stress    Int?     // 1-5 arasƒ± stres seviyesi
  note      String?  @db.Text
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

// Plan Koleksiyonlarƒ±
model Collection {
  id          String           @id @default(cuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?          @db.Text
  isPublic    Boolean          @default(false)
  plans       CollectionPlan[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([userId, createdAt])
}

// Koleksiyon-Plan ili≈ükisi
model CollectionPlan {
  id           String     @id @default(cuid())
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  planId       String
  plan         Plan       @relation(fields: [planId], references: [id], onDelete: Cascade)
  order        Int        @default(0)
  note         String?    @db.Text
  createdAt    DateTime   @default(now())

  @@unique([collectionId, planId])
  @@index([collectionId, order])
}

// Kullanƒ±cƒ± takip sistemi
model Follow {
  id          String   @id @default(cuid())
  followerId  String   // Takip eden kullanƒ±cƒ±
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String   // Takip edilen kullanƒ±cƒ±
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// SEO Ayarlarƒ±
model SeoSettings {
  id        Int      @id @default(1)
  settings  Json     // SEO ayarlarƒ±nƒ± JSON olarak sakla
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Hesap Verebilirlik Partneri Sistemi
model AccountabilityPartnership {
  id          String                 @id @default(cuid())
  requesterId String
  requester   User                   @relation("PartnerRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  partnerId   String
  partner     User                   @relation("PartnerReceiver", fields: [partnerId], references: [id], onDelete: Cascade)
  status      PartnershipStatus      @default(PENDING)
  message     String?                @db.Text
  sharedGoals PartnershipGoal[]
  messages    PartnershipMessage[]
  checkIns    PartnershipCheckIn[]
  createdAt   DateTime               @default(now())
  acceptedAt  DateTime?
  endedAt     DateTime?

  @@unique([requesterId, partnerId])
  @@index([requesterId, status])
  @@index([partnerId, status])
}

model PartnershipGoal {
  id            String                    @id @default(cuid())
  partnershipId String
  partnership   AccountabilityPartnership @relation(fields: [partnershipId], references: [id], onDelete: Cascade)
  title         String
  description   String?                   @db.Text
  targetDate    DateTime
  completed     Boolean                   @default(false)
  completedAt   DateTime?
  createdBy     String
  createdAt     DateTime                  @default(now())

  @@index([partnershipId, completed])
}

model PartnershipMessage {
  id            String                    @id @default(cuid())
  partnershipId String
  partnership   AccountabilityPartnership @relation(fields: [partnershipId], references: [id], onDelete: Cascade)
  senderId      String
  content       String                    @db.Text
  isRead        Boolean                   @default(false)
  readAt        DateTime?
  createdAt     DateTime                  @default(now())

  @@index([partnershipId, createdAt])
  @@index([senderId])
}

model PartnershipCheckIn {
  id            String                    @id @default(cuid())
  partnershipId String
  partnership   AccountabilityPartnership @relation(fields: [partnershipId], references: [id], onDelete: Cascade)
  checkInId     String
  checkIn       CheckIn                   @relation(fields: [checkInId], references: [id], onDelete: Cascade)
  supportNote   String?                   @db.Text
  createdAt     DateTime                  @default(now())

  @@index([partnershipId, createdAt])
}

// Anket Sistemi
model Poll {
  id          String       @id @default(cuid())
  question    String
  description String?      @db.Text
  isActive    Boolean      @default(true)
  isPublic    Boolean      @default(true)
  allowMultiple Boolean    @default(false) // √áoklu se√ßim izni
  endsAt      DateTime?    // Anket biti≈ü tarihi (opsiyonel)
  createdBy   String
  creator     User         @relation(fields: [createdBy], references: [id])
  options     PollOption[]
  votes       PollVote[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([isActive, createdAt])
  @@index([createdBy])
}

model PollOption {
  id        String     @id @default(cuid())
  pollId    String
  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  text      String
  order     Int        @default(0)
  votes     PollVote[]
  createdAt DateTime   @default(now())

  @@index([pollId, order])
}

model PollVote {
  id        String     @id @default(cuid())
  pollId    String
  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  optionId  String
  option    PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  userId    String
  voter     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())

  @@unique([pollId, optionId, userId])
  @@index([pollId])
  @@index([userId])
}

// Kriz Anƒ± Sistemi
model CrisisButton {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trigger     String   // "food_craving", "motivation_low", "stress_eating", "boredom"
  resolved    Boolean  @default(false)
  resolvedAt  DateTime?
  note        String?  @db.Text
  createdAt   DateTime @default(now())

  @@index([userId, createdAt])
  @@index([trigger])
}

// Duvar Yazƒ±larƒ± Sistemi
model WallPost {
  id        String   @id @default(cuid())
  userId    String   // Duvarƒ±n sahibi
  user      User     @relation("WallPostOwner", fields: [userId], references: [id], onDelete: Cascade)
  authorId  String   // Mesajƒ± yazan
  author    User     @relation("WallPostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  isPublic  Boolean  @default(true) // Herkes g√∂rebilir mi?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, createdAt])
  @@index([authorId])
}

// Kalori Takibi Sistemi

// Yemek veritabanƒ± (√∂nceden tanƒ±mlƒ± yemekler)
model Food {
  id          String       @id @default(cuid())
  name        String
  nameEn      String?      // ƒ∞ngilizce isim
  category    String       // "Kahvaltƒ±", "Ana Yemek", "Atƒ±≈ütƒ±rmalƒ±k", "ƒ∞√ßecek", "Meyve", "Sebze"
  calories    Float        // 100g i√ßin kalori
  protein     Float?       // 100g i√ßin protein (g)
  carbs       Float?       // 100g i√ßin karbonhidrat (g)
  fat         Float?       // 100g i√ßin yaƒü (g)
  fiber       Float?       // 100g i√ßin lif (g)
  servingSize Float        @default(100) // Standart porsiyon (g)
  isCommon    Boolean      @default(false) // Sƒ±k kullanƒ±lan yemekler
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  mealEntries MealEntry[]

  @@index([category])
  @@index([isCommon])
  @@index([name])
}

// Kullanƒ±cƒ± √∂ƒü√ºn kayƒ±tlarƒ±
model Meal {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  date        DateTime    // √ñƒü√ºn tarihi
  mealType    String      // "Kahvaltƒ±", "√ñƒüle", "Ak≈üam", "Atƒ±≈ütƒ±rmalƒ±k"
  totalCalories Float     @default(0)
  totalProtein  Float     @default(0)
  totalCarbs    Float     @default(0)
  totalFat      Float     @default(0)
  note        String?     @db.Text
  entries     MealEntry[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId, date])
  @@index([mealType])
}

// √ñƒü√ºn i√ßindeki yemekler
model MealEntry {
  id        String   @id @default(cuid())
  mealId    String
  meal      Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)
  foodId    String?  // Veritabanƒ±ndan se√ßilmi≈üse
  food      Food?    @relation(fields: [foodId], references: [id])
  foodName  String   // √ñzel yemek adƒ± (veritabanƒ±nda yoksa)
  amount    Float    // Miktar (g)
  calories  Float    // Hesaplanan kalori
  protein   Float?   // Hesaplanan protein
  carbs     Float?   // Hesaplanan karbonhidrat
  fat       Float?   // Hesaplanan yaƒü
  createdAt DateTime @default(now())

  @@index([mealId])
  @@index([foodId])
}

// G√ºnl√ºk kalori hedefi
model CalorieGoal {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dailyCalories Int      // G√ºnl√ºk kalori hedefi
  dailyProtein  Int?     // G√ºnl√ºk protein hedefi (g)
  dailyCarbs    Int?     // G√ºnl√ºk karbonhidrat hedefi (g)
  dailyFat      Int?     // G√ºnl√ºk yaƒü hedefi (g)
  activityLevel String   @default("sedentary") // "sedentary", "light", "moderate", "active", "very_active"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
